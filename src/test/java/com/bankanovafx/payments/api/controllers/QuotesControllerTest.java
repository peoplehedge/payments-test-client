/*
 * PaymentsAPI
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bankanovafx.payments.api.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.bankanovafx.payments.api.models.*;
import com.bankanovafx.payments.api.exceptions.*;
import com.bankanovafx.payments.api.APIHelper;
import com.bankanovafx.payments.api.Configuration;
import com.bankanovafx.payments.api.testing.TestHelper;
import com.bankanovafx.payments.api.controllers.QuotesController;

import com.fasterxml.jackson.core.type.TypeReference;

public class QuotesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static QuotesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getQuotes();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Create new Quote
     * @throws Throwable
     */
    @Test
    public void testTestCreateQuote() throws Throwable {
        // Parameters for the API call
        String bankId = "123456789";
        Quote body = APIHelper.deserialize("{   \"beneficiaryAmount\": 12345.67,   \"beneficiaryCurrency\": \"EUR\" }", new TypeReference<Quote>(){});

        // Set callback and perform API call
        Quote result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createQuote(bankId, body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        headers.put("X-Transaction-ID", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isJsonObjectProperSubsetOf(
                "{\n    \"id\": 8566,\n    \"beneficiaryCurrency\": \"EUR\",\n    \"originatorAmountIsFixed\": false,\n    \"originatorAmount\": 12.63,\n    \"beneficiaryAmount\": 10.00,\n    \"exchangeRate\": 1.263,\n    \"locked\": false,\n    \"revision\": 1\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
