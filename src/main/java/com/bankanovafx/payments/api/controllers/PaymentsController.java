/*
 * PaymentsAPI
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bankanovafx.payments.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.bankanovafx.payments.api.*;
import com.bankanovafx.payments.api.models.*;
import com.bankanovafx.payments.api.exceptions.*;
import com.bankanovafx.payments.api.http.client.HttpClient;
import com.bankanovafx.payments.api.http.client.HttpContext;
import com.bankanovafx.payments.api.http.request.HttpRequest;
import com.bankanovafx.payments.api.http.response.HttpResponse;
import com.bankanovafx.payments.api.http.response.HttpStringResponse;
import com.bankanovafx.payments.api.http.client.APICallBack;
import com.bankanovafx.payments.api.controllers.syncwrapper.APICallBackCatcher;

public class PaymentsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static PaymentsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the PaymentsController class 
     */
    public static PaymentsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new PaymentsController();
                }
            }
        }
        return instance;
    }

    /**
     * Creates a new Payment
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    body    Optional parameter: Example: 
     * @return    Returns the Payment response from the API call 
     */
    public Payment createPayment(
                final String bankId,
                final Payment body
    ) throws Throwable {

        HttpRequest _request = _buildCreatePaymentRequest(bankId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreatePaymentResponse(_context);
    }

    /**
     * Creates a new Payment
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    body    Optional parameter: Example: 
     */
    public void createPaymentAsync(
                final String bankId,
                final Payment body,
                final APICallBack<Payment> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreatePaymentRequest(bankId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            Payment returnValue = _handleCreatePaymentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createPayment
     */
    private HttpRequest _buildCreatePaymentRequest(
                final String bankId,
                final Payment body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/payments");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("bankId", bankId);
        _headers.put("x-api-key", Configuration.xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createPayment
     * @return An object of type Payment
     */
    private Payment _handleCreatePaymentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new RequestErrorException("Error in Request", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 500) {
            throw new RequestErrorException("System Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        Payment _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Payment>(){});

        return _result;
    }

    /**
     * Attempts to cancel a Payment. Does not automatically cancel the linked Quote.
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to cancel
     */
    public void deleteCancelPayment(
                final String bankId,
                final int paymentId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteCancelPaymentRequest(bankId, paymentId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleDeleteCancelPaymentResponse(_context);
    }

    /**
     * Attempts to cancel a Payment. Does not automatically cancel the linked Quote.
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to cancel
     */
    public void deleteCancelPaymentAsync(
                final String bankId,
                final int paymentId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteCancelPaymentRequest(bankId, paymentId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleDeleteCancelPaymentResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteCancelPayment
     */
    private HttpRequest _buildDeleteCancelPaymentRequest(
                final String bankId,
                final int paymentId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/payments/{paymentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("paymentId", paymentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("bankId", bankId);
        _headers.put("x-api-key", Configuration.xApiKey);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteCancelPayment
     */
    private void _handleDeleteCancelPaymentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new RequestErrorException("Error in Request", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 500) {
            throw new RequestErrorException("System Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * Approves a Payment to be sent
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to approve
     */
    public void createApprovePayment(
                final String bankId,
                final int paymentId
    ) throws Throwable {

        HttpRequest _request = _buildCreateApprovePaymentRequest(bankId, paymentId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleCreateApprovePaymentResponse(_context);
    }

    /**
     * Approves a Payment to be sent
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to approve
     */
    public void createApprovePaymentAsync(
                final String bankId,
                final int paymentId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateApprovePaymentRequest(bankId, paymentId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleCreateApprovePaymentResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createApprovePayment
     */
    private HttpRequest _buildCreateApprovePaymentRequest(
                final String bankId,
                final int paymentId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/payments/{paymentId}/approve");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("paymentId", paymentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("bankId", bankId);
        _headers.put("x-api-key", Configuration.xApiKey);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createApprovePayment
     */
    private void _handleCreateApprovePaymentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new RequestErrorException("Error in Request", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 500) {
            throw new RequestErrorException("System Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * Validates an IBAN and returns the bank account information
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    iban    Required parameter: Currency that is required by the client, sell foreign currency in exchange for local currency
     * @return    Returns the BankAccount response from the API call 
     */
    public BankAccount getValidateIban(
                final String bankId,
                final String iban
    ) throws Throwable {

        HttpRequest _request = _buildGetValidateIbanRequest(bankId, iban);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetValidateIbanResponse(_context);
    }

    /**
     * Validates an IBAN and returns the bank account information
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    iban    Required parameter: Currency that is required by the client, sell foreign currency in exchange for local currency
     */
    public void getValidateIbanAsync(
                final String bankId,
                final String iban,
                final APICallBack<BankAccount> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetValidateIbanRequest(bankId, iban);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BankAccount returnValue = _handleGetValidateIbanResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getValidateIban
     */
    private HttpRequest _buildGetValidateIbanRequest(
                final String bankId,
                final String iban) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/payments/get-bank-account-from-iban");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("iban", iban);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("bankId", bankId);
        _headers.put("x-api-key", Configuration.xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getValidateIban
     * @return An object of type BankAccount
     */
    private BankAccount _handleGetValidateIbanResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new RequestErrorException("Error in Request", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 500) {
            throw new RequestErrorException("System Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BankAccount _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BankAccount>(){});

        return _result;
    }

    /**
     * Update the data for a Payment before it is approved or sent
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to cancel
     * @param    body    Optional parameter: Example: 
     * @return    Returns the Payment response from the API call 
     */
    public Payment updatePayment(
                final String bankId,
                final int paymentId,
                final Payment body
    ) throws Throwable {

        HttpRequest _request = _buildUpdatePaymentRequest(bankId, paymentId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdatePaymentResponse(_context);
    }

    /**
     * Update the data for a Payment before it is approved or sent
     * @param    bankId    Required parameter: Bank ID (Routing Number)
     * @param    paymentId    Required parameter: ID of payment to cancel
     * @param    body    Optional parameter: Example: 
     */
    public void updatePaymentAsync(
                final String bankId,
                final int paymentId,
                final Payment body,
                final APICallBack<Payment> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdatePaymentRequest(bankId, paymentId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            Payment returnValue = _handleUpdatePaymentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updatePayment
     */
    private HttpRequest _buildUpdatePaymentRequest(
                final String bankId,
                final int paymentId,
                final Payment body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/payments/{paymentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("paymentId", paymentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("bankId", bankId);
        _headers.put("x-api-key", Configuration.xApiKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updatePayment
     * @return An object of type Payment
     */
    private Payment _handleUpdatePaymentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new RequestErrorException("Error in Request", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 500) {
            throw new RequestErrorException("System Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        Payment _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Payment>(){});

        return _result;
    }

}
